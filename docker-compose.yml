#Start this with docker compose up -d
#To update service:
#    docker compose rm -s <service name>
#    docker compose build --no-cache <service name>
#    docker compose up -d <service name>

x-env:
    #Change this to any username
    - &POSTGRES_USER postgres
    #Change this to any password (and keep it secure)
    - &POSTGRES_PASSWORD postgres
    #
    #Change this to your domain for keycloak
    - &KEYCLOAK_HOST keycloak.u-with-me.education
    #Change this to any username
    - &KEYCLOAK_USER admin
    #Change this to any password (and keep it secure)
    - &KEYCLOAK_PASSWORD admin
    #
    #Change this to your domain for uwithme backend
    - &U_WITH_ME_SERVICE_HOST service1.u-with-me.education
    #Change this to new secret from keycloak
    - &U_WITH_ME_SERVICE_KEYCLOAK_SECRET mwBTmK6mTIohwxzXzaf241IXuB9mnz8o
    #
    #Change this to your domain for uwithme frontend
    - &U_WITH_ME_UI_HOST u-with-me.education
    #
    #Change this to your domain for testsystem backend
    - &TEST_SYSTEM_SERVICE_HOST service2.u-with-me.education
    #Change this to new secret from keycloak
    - &TEST_SYSTEM_SERVICE_KEYCLOAK_SECRET RHaSmEGaKSr4LARtcqpUgBjFXB4adb4h
    #
    #Change this to your domain for uwithme frontend
    - &TEST_SYSTEM_UI_HOST testsystem.u-with-me.education
    #
    #Change this to your domain for bot system
    - &BOT_SERVICE_HOST bot.u-with-me.education
    #Change this to your bot username (registered with BotFather)
    - &BOT_BOT_NAME UniversityWithMe_bot
    #Change this to your bot key (registered with BotFather)
    - &BOT_BOT_KEY 5000316763:AAGtuGji9Er_cqAjV68HHUodyQ_iLmA6WHQ/test
    #Change this to new secret from keycloak
    - &BOT_KEYCLOAK_SECRET cxEUxcYWl8R2tuHVCgqsfLWsi6DGJO4j

services:

  nginx-proxy:
    build: ./nginx-proxy/.
    container_name: uwithme-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ~/nginx-data/certs:/etc/nginx/certs
      - ~/nginx-data/vhost:/etc/nginx/vhost.d
      - ~/nginx-data/html:/usr/share/nginx/html

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: uwithme-acme-companion
    restart: always
    volumes_from:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ~/nginx-data/acme:/etc/acme.sh

  db:
    image: postgres:latest
    container_name: uwithme-postgres
    restart: always
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
      - ~/postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: *POSTGRES_USER
      POSTGRES_PASSWORD: *POSTGRES_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10

  keycloak:
    build: ./keycloak/.
    container_name: uwithme-keycloak
    restart: always
    ports:
      - "8080:8080"
    environment:
      VIRTUAL_HOST: *KEYCLOAK_HOST
      VIRTUAL_PORT: 8080
      LETSENCRYPT_HOST: *KEYCLOAK_HOST
      KC_HOSTNAME: *KEYCLOAK_HOST
      KC_DB_URL: jdbc:postgresql://db/keycloak
      KC_DB_USERNAME: *POSTGRES_USER
      KC_DB_PASSWORD: *POSTGRES_PASSWORD
      KEYCLOAK_ADMIN: *KEYCLOAK_USER
      KEYCLOAK_ADMIN_PASSWORD: *KEYCLOAK_PASSWORD

  uwithme-service:
    build: uwithme-service/.
    container_name: uwithme-service
    restart: always
    ports:
      - "8081:8081"
    volumes:
      - ~/uwm-data:/usr/app/uwithme-user-files
    environment:
      VIRTUAL_HOST: *U_WITH_ME_SERVICE_HOST
      VIRTUAL_PORT: 8081
      LETSENCRYPT_HOST: *U_WITH_ME_SERVICE_HOST
      UWITHME_JDBC_URL: jdbc:postgresql://db/uwithme
      UWITHME_JDBC_USER: *POSTGRES_USER
      UWITHME_JDBC_PASSWORD: *POSTGRES_PASSWORD
      UWITHME_KEYCLOAK_HOST: *KEYCLOAK_HOST
      UWITHME_KEYCLOAK_REALM: KhPI
      UWITHME_KEYCLOAK_SECRET: *U_WITH_ME_SERVICE_KEYCLOAK_SECRET
    depends_on:
      db:
        condition: service_healthy

  uwithme-ui:
    build: uwithme-ui/.
    container_name: uwithme-ui
    restart: always
    ports:
      - "8082:8082"
    environment:
      VIRTUAL_HOST: *U_WITH_ME_UI_HOST
      VIRTUAL_PORT: 8082
      LETSENCRYPT_HOST: *U_WITH_ME_UI_HOST
      UWITHME_BACKEND_HOST: *U_WITH_ME_SERVICE_HOST
      UWITHME_KEYCLOAK_HOST: *KEYCLOAK_HOST
      UWITHME_KEYCLOAK_REALM: KhPI
      UWITHME_TESTSYSTEM_URL: *TEST_SYSTEM_UI_HOST
      UWITHME_BOT_NAME: *BOT_BOT_NAME

  testsystem-service:
    build: testsystem-service/.
    container_name: uwithme-testsystem-service
    restart: always
    ports:
      - "8090:8090"
    environment:
      VIRTUAL_HOST: *TEST_SYSTEM_SERVICE_HOST
      VIRTUAL_PORT: 8090
      LETSENCRYPT_HOST: *TEST_SYSTEM_SERVICE_HOST
      TESTSYSTEM_JDBC_URL: jdbc:postgresql://db/testsystem
      TESTSYSTEM_JDBC_USERNAME: *POSTGRES_USER
      TESTSYSTEM_JDBC_PASSWORD: *POSTGRES_PASSWORD
      TESTSYSTEM_KEYCLOAK_HOST: *KEYCLOAK_HOST
      TESTSYSTEM_KEYCLOAK_REALM: KhPI
      TESTSYSTEM_KEYCLOAK_SECRET: *TEST_SYSTEM_SERVICE_KEYCLOAK_SECRET
    depends_on:
      db:
        condition: service_healthy

  testsystem-ui:
    build: testsystem-ui/.
    container_name: uwithme-testsystem-ui
    restart: always
    ports:
      - "8091:8091"
    environment:
      VIRTUAL_HOST: *TEST_SYSTEM_UI_HOST
      VIRTUAL_PORT: 8091
      LETSENCRYPT_HOST: *TEST_SYSTEM_UI_HOST
      TESTSYSTEM_SERVER_HOST: *TEST_SYSTEM_SERVICE_HOST
      TESTSYSTEM_KEYCLOAK_HOST: *KEYCLOAK_HOST
      TESTSYSTEM_KEYCLOAK_REALM: KhPI

  bot:
    build: bot/.
    container_name: uwithme-bot
    restart: always
    ports:
      - "8010:8010"
    environment:
      VIRTUAL_HOST: *BOT_SERVICE_HOST
      VIRTUAL_PORT: 8010
      LETSENCRYPT_HOST: *BOT_SERVICE_HOST
      UNIBOT_JDBC_URL: jdbc:postgresql://db/unibot
      UNIBOT_JDBC_USERNAME: *POSTGRES_USER
      UNIBOT_JDBC_PASSWORD: *POSTGRES_PASSWORD
      UNIBOT_BOT_NAME: *BOT_BOT_NAME
      UNIBOT_BOT_KEY: *BOT_BOT_KEY
      UNIBOT_HOST: *BOT_SERVICE_HOST
      UNIBOT_UWITHME_HOST: *U_WITH_ME_SERVICE_HOST
      UNIBOT_KEYCLOAK_HOST: *KEYCLOAK_HOST
      UNIBOT_KEYCLOAK_REALM: KhPI
      UNIBOT_KEYCLOAK_SECRET: *BOT_KEYCLOAK_SECRET
    depends_on:
      db:
        condition: service_healthy